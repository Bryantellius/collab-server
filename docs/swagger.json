{
  "openapi": "3.0.0",
  "info": {
    "title": "Collab API",
    "description": "API service for projects",
    "version": "1.0.0",
    "contact": { "email": "brbryant2639@gmail.com" }
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    },
    {
      "url": "https://mywebsite.com",
      "description": "Live address for api resource"
    }
  ],
  "host": "mywebsite.com",
  "basePath": "/api/v1",
  "schemes": ["http", "https"],
  "tags": [
    {
      "name": "users",
      "description": "Operations for user account management and authentication."
    },
    {
      "name": "watchlist",
      "description": "Operations for movie watchlist management."
    }
  ],
  "paths": {
    "/users/authenticate": {
      "post": {
        "tags": ["users"],
        "summary": "Authenticate user credentials and return a JWT token and a cookie with a refresh token",
        "description": "Users must be verified before authenticating.",
        "operationId": "authenticate",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "joe@mail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "some_password!"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User details, a JWT access token and a refresh token cookie",
            "headers": {
              "Set-Cookie": {
                "description": "`refreshToken`",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "5eb12e197e06a76ccdefc121"
                    },
                    "firstName": {
                      "type": "string",
                      "example": "Joe"
                    },
                    "lastName": {
                      "type": "string",
                      "example": "Smith"
                    },
                    "email": {
                      "type": "string",
                      "example": "joe@mail.com"
                    },
                    "role": {
                      "type": "string",
                      "example": "User"
                    },
                    "created": {
                      "type": "string",
                      "example": "2020-05-05T09:12:57.848Z"
                    },
                    "isVerified": {
                      "type": "boolean",
                      "example": true
                    },
                    "jwtToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The email or password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email or password is incorrect"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/refresh-token": {
      "post": {
        "tags": ["users"],
        "summary": "Use a refresh token to generate a new JWT token and a new refresh token",
        "description": "The refresh token is sent and returned via cookies.",
        "operationId": "refreshToken",
        "parameters": [
          {
            "in": "cookie",
            "name": "refreshToken",
            "description": "The `refreshToken` cookie",
            "schema": {
              "type": "string",
              "example": "51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account details, a JWT access token and a new refresh token cookie",
            "headers": {
              "Set-Cookie": {
                "description": "`refreshToken`",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "5eb12e197e06a76ccdefc121"
                    },
                    "title": {
                      "type": "string",
                      "example": "Mr"
                    },
                    "firstName": {
                      "type": "string",
                      "example": "Jason"
                    },
                    "lastName": {
                      "type": "string",
                      "example": "Watmore"
                    },
                    "email": {
                      "type": "string",
                      "example": "jason@example.com"
                    },
                    "role": {
                      "type": "string",
                      "example": "Admin"
                    },
                    "created": {
                      "type": "string",
                      "example": "2020-05-05T09:12:57.848Z"
                    },
                    "isVerified": {
                      "type": "boolean",
                      "example": true
                    },
                    "jwtToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The refresh token is invalid, revoked or expired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid token"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/revoke-token": {
      "post": {
        "tags": ["users"],
        "summary": "Revoke a refresh token",
        "description": "Admin users can revoke the tokens of any user, regular users can only revoke their own tokens.",
        "operationId": "revokeToken",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "cookie",
            "name": "refreshToken",
            "description": "The refresh token can be sent in a cookie or the post body, if both are sent the token in the body is used.",
            "schema": {
              "type": "string",
              "example": "51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The refresh token was successfully revoked",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Token revoked"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The refresh token is not provided or is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid token"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/users/register": {
      "post": {
        "tags": ["users"],
        "summary": "Register a new user account and send a verification email",
        "description": "The first registered user in the system is assigned the `Admin` role, other users are assigned the `User` role by default.",
        "operationId": "register",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "Joe"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Smith"
                  },
                  "email": {
                    "type": "string",
                    "example": "joe@mail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "some_password!"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "some_password!"
                  },
                  "acceptTerms": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "firstName",
                  "lastName",
                  "email",
                  "password",
                  "confirmPassword",
                  "acceptTerms"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The registration request was successful and a verification email has been sent to the specified email address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Registration successful, please check your email for verification instructions"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The registration request was unsuccessful to the email address already being in use by another user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email is already registered with an existing user."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/verify-email": {
      "post": {
        "tags": ["users"],
        "summary": "Verify a new account with a verification token received by email after registration",
        "operationId": "verifyEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
                  }
                },
                "required": ["token"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification was successful so you can now login to the account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Verification successful, you can now login"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Verification failed due to an invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email Verification failed due to invalid token."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounts/forgot-password": {
      "post": {
        "tags": ["users"],
        "summary": "Submit email address to reset the password on a user account",
        "operationId": "forgotPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "joe@mail.com"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was received and an email has been sent to the specified address with password reset instructions (if the email address is associated with a user)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Please check your email for password reset instructions"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was received, but the provided email is not associated with a user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Could not validate a user account associated with the provided email address."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/validate-reset-token": {
      "post": {
        "tags": ["users"],
        "summary": "Validate the reset password token received by email after submitting to the /accounts/forgot-password route",
        "operationId": "validateResetToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
                  }
                },
                "required": ["token"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Token is valid"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Token is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid reset token"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/reset-password": {
      "post": {
        "tags": ["users"],
        "summary": "Reset the password for an account",
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
                  },
                  "password": {
                    "type": "string",
                    "example": "newPass123"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "newPass123"
                  }
                },
                "required": ["token", "password", "confirmPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset was successful so you can now login to the account with the new password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset successful, you can now login"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Password reset failed due to an invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid reset token"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "Get a list of all accounts",
        "description": "Restricted to admin users.",
        "operationId": "getAllAccounts",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "5eb12e197e06a76ccdefc121"
                      },
                      "firstName": {
                        "type": "string",
                        "example": "Joe"
                      },
                      "lastName": {
                        "type": "string",
                        "example": "Smith"
                      },
                      "email": {
                        "type": "string",
                        "example": "joe@mail.com"
                      },
                      "role": {
                        "type": "string",
                        "example": "User"
                      },
                      "created": {
                        "type": "string",
                        "example": "2020-05-05T09:12:57.848Z"
                      },
                      "updated": {
                        "type": "string",
                        "example": "2020-05-08T03:11:21.553Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Create a new account",
        "description": "Restricted to admin users.",
        "operationId": "createAccount",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "Joe"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Smith"
                  },
                  "email": {
                    "type": "string",
                    "example": "joe@mail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "some_password!"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "some_password!"
                  },
                  "role": {
                    "type": "string",
                    "enum": ["Admin", "User"]
                  }
                },
                "required": [
                  "firstName",
                  "lastName",
                  "email",
                  "password",
                  "confirmPassword",
                  "role"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully, verification is not required for users created with this endpoint. The details of the new user are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "5eb12e197e06a76ccdefc121"
                    },
                    "firstName": {
                      "type": "string",
                      "example": "Joe"
                    },
                    "lastName": {
                      "type": "string",
                      "example": "Smith"
                    },
                    "email": {
                      "type": "string",
                      "example": "joe@smith.com"
                    },
                    "role": {
                      "type": "string",
                      "example": "User"
                    },
                    "created": {
                      "type": "string",
                      "example": "2020-05-05T09:12:57.848Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email is already registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email 'joe@mail.com' is already registered"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/users/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "description": "Account id",
          "required": true,
          "example": "5eb12e197e06a76ccdefc121",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["users"],
        "summary": "Get a single account by id",
        "description": "Admin users can access any account, regular users are restricted to their own account.",
        "operationId": "getAccountById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the specified account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "5eb12e197e06a76ccdefc121"
                    },
                    "firstName": {
                      "type": "string",
                      "example": "Joe"
                    },
                    "lastName": {
                      "type": "string",
                      "example": "Smith"
                    },
                    "email": {
                      "type": "string",
                      "example": "joe@mail.com"
                    },
                    "role": {
                      "type": "string",
                      "example": "User"
                    },
                    "created": {
                      "type": "string",
                      "example": "2020-05-05T09:12:57.848Z"
                    },
                    "updated": {
                      "type": "string",
                      "example": "2020-05-08T03:11:21.553Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update a user account",
        "description": "Admin users can update any account including role, regular users are restricted to their own account and cannot update role.",
        "operationId": "updateAccount",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "Joe"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Smith"
                  },
                  "email": {
                    "type": "string",
                    "example": "joe@mail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "some_password!"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "some_password!"
                  },
                  "role": {
                    "type": "string",
                    "enum": ["Admin", "User"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully. The details of the updated user are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "5eb12e197e06a76ccdefc121"
                    },
                    "firstName": {
                      "type": "string",
                      "example": "Joe"
                    },
                    "lastName": {
                      "type": "string",
                      "example": "Smith"
                    },
                    "email": {
                      "type": "string",
                      "example": "joe@mail.com"
                    },
                    "role": {
                      "type": "string",
                      "example": "User"
                    },
                    "created": {
                      "type": "string",
                      "example": "2020-05-05T09:12:57.848Z"
                    },
                    "updated": {
                      "type": "string",
                      "example": "2020-05-08T03:11:21.553Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete a user account",
        "description": "Admin users can delete any account, regular users are restricted to their own account.",
        "operationId": "deleteAccount",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User to delete cannot be found with the given id.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/watchlist": {
      "get": {
        "tags": ["watchlist"],
        "summary": "Get a list of watchlist items",
        "description": "Returned list is based on the requesting user",
        "operationId": "getAllWatchlistItems",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "An array of all watchlist items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "5eb12e197e06a76ccdefc121"
                          },
                          "title": {
                            "type": "string",
                            "example": "The Fellowship of the Ring"
                          },
                          "director": {
                            "type": "string",
                            "example": "Peter Jackson"
                          },
                          "genre": {
                            "type": "string",
                            "example": "Action, Adventure, Drama"
                          },
                          "rating": {
                            "type": "string",
                            "example": "4"
                          },
                          "isWatched": {
                            "type": "boolean"
                          },
                          "dateAdded": {
                            "type": "string",
                            "example": "2020-05-05T09:12:57.848Z"
                          },
                          "dateUpdated": {
                            "type": "string",
                            "example": "2020-05-05T09:12:57.848Z"
                          },
                          "dateWatched": {
                            "type": "string",
                            "example": "2020-05-05T09:12:57.848Z"
                          },
                          "userId": {
                            "type": "string",
                            "example": "96g23j197e06a76cdtetp231"
                          }
                        }
                      }
                    },
                    "succeeded": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": ["watchlist"],
        "summary": "Create a watchlist item",
        "description": "Users can create watchlist items linked to their account",
        "operationId": "createWatchlistItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "The Fellowship of the Ring"
                  },
                  "director": {
                    "type": "string",
                    "example": "Peter Jackson"
                  },
                  "genre": {
                    "type": "string",
                    "example": "Action, Adventure, Drama"
                  },
                  "rating": {
                    "type": "string",
                    "example": "4"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "some_password!"
                  },
                  "isWatched": {
                    "type": "boolean",
                    "example": false
                  }
                },
                "required": ["title", "director", "genre"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Watchlist item created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "5eb12e197e06a76ccdefc121"
                        },
                        "title": {
                          "type": "string",
                          "example": "The Fellowship of the Ring"
                        },
                        "director": {
                          "type": "string",
                          "example": "Peter Jackson"
                        },
                        "genre": {
                          "type": "string",
                          "example": "Action, Adventure, Drama"
                        },
                        "rating": {
                          "type": "string",
                          "example": "4"
                        },
                        "isWatched": {
                          "type": "boolean"
                        },
                        "dateAdded": {
                          "type": "string",
                          "example": "2020-05-05T09:12:57.848Z"
                        },
                        "dateUpdated": {
                          "type": "string",
                          "example": "2020-05-05T09:12:57.848Z"
                        },
                        "dateWatched": {
                          "type": "string",
                          "example": "2020-05-05T09:12:57.848Z"
                        },
                        "userId": {
                          "type": "string",
                          "example": "96g23j197e06a76cdtetp231"
                        }
                      }
                    },
                    "succeeded": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid items details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "Validation error: \"title\" is required"
                    },
                    "succeeded": {
                      "type": "boolean",
                      "example": "false"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/watchlist/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "description": "Watchlist Item id",
          "required": true,
          "example": "5eb12e197e06a76ccdefc121",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["watchlist"],
        "summary": "Get a single watchlist item by id",
        "description": "Users can access a single watchlist item associated with their account",
        "operationId": "getWatchlistItemById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the specified watchlist item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "5eb12e197e06a76ccdefc121"
                        },
                        "title": {
                          "type": "string",
                          "example": "The Fellowship of the Ring"
                        },
                        "director": {
                          "type": "string",
                          "example": "Peter Jackson"
                        },
                        "genre": {
                          "type": "string",
                          "example": "Action, Adventure, Drama"
                        },
                        "rating": {
                          "type": "string",
                          "example": "4"
                        },
                        "isWatched": {
                          "type": "boolean"
                        },
                        "dateAdded": {
                          "type": "string",
                          "example": "2020-05-05T09:12:57.848Z"
                        },
                        "dateUpdated": {
                          "type": "string",
                          "example": "2020-05-05T09:12:57.848Z"
                        },
                        "dateWatched": {
                          "type": "string",
                          "example": "2020-05-05T09:12:57.848Z"
                        },
                        "userId": {
                          "type": "string",
                          "example": "96g23j197e06a76cdtetp231"
                        }
                      }
                    },
                    "succeeded": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "tags": ["watchlist"],
        "summary": "Update a watchlist item",
        "description": "Users can update a single watchlist item associated with their account",
        "operationId": "updateWatchlistItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "The Fellowship of the Ring"
                  },
                  "director": {
                    "type": "string",
                    "example": "Peter Jackson"
                  },
                  "genre": {
                    "type": "string",
                    "example": "Action, Adventure, Drama"
                  },
                  "rating": {
                    "type": "string",
                    "example": "4"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "some_password!"
                  },
                  "isWatched": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Watchlist item updated successfully. The details of the updated watchlist item are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "5eb12e197e06a76ccdefc121"
                        },
                        "title": {
                          "type": "string",
                          "example": "The Fellowship of the Ring"
                        },
                        "director": {
                          "type": "string",
                          "example": "Peter Jackson"
                        },
                        "genre": {
                          "type": "string",
                          "example": "Action, Adventure, Drama"
                        },
                        "rating": {
                          "type": "string",
                          "example": "4"
                        },
                        "isWatched": {
                          "type": "boolean"
                        },
                        "dateAdded": {
                          "type": "string",
                          "example": "2020-05-05T09:12:57.848Z"
                        },
                        "dateUpdated": {
                          "type": "string",
                          "example": "2020-05-05T09:12:57.848Z"
                        },
                        "dateWatched": {
                          "type": "string",
                          "example": "2020-05-05T09:12:57.848Z"
                        },
                        "userId": {
                          "type": "string",
                          "example": "96g23j197e06a76cdtetp231"
                        }
                      }
                    },
                    "succeeded": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid items details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "Validation error: \"title\" is required"
                    },
                    "succeeded": {
                      "type": "boolean",
                      "example": "false"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": ["watchlist"],
        "summary": "Delete a watchlist item",
        "description": "Users can delete a single watchlist item associated with their account",
        "operationId": "deleteWatchlistItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Watchlist item deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "Watchlist item deleted successfully"
                    },
                    "succeeded": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Watchlist item does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid, or the user does not have access to perform the action",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Not Found"
                }
              }
            }
          }
        }
      }
    }
  }
}
